<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="MFX_dev" label="">
    <memberTool name="update_preset"/>
    <memberTool name="hide_unhide_parms"/>
    <memberTool name="add_parms"/>
  </toolshelf>

  <tool name="update_preset" label="Preset Update" icon="R:/Houdini/Houdini_otls/master/Menhir/menhirfx_logo_inbox128.png">
    <script scriptType="python"><![CDATA[import hou
import os
import shutil
import logging
from datetime import datetime

'''
Author: Elise Vidal
email: evidal@artfx.fr
date: 04/07/2022

Preset Updater
This scripts is used to update custom tools from the MenhirFX shelves, based on the changes brought to a selected node.
IMPORTANT: For this script to work the preset node needs two custom parameters: preset_name, and shelf_name.
These can be added through the Parameter Interface
preset_name = string, should be the same as the name of the tool on the shelf
shelf_name = string, should be the name of the shelf holding the tool that needs to be updated
Limitations: can only update one node. Use a top node to contain multiple nodes if needed
_______________________

Updater de Presets
Ce script sert ÃÂ  faciliter la mise ÃÂ  jour des presets des shelf MenhirFX, basÃÂ© sur les changement appliquÃÂ© ÃÂ  un node sÃÂ©lectionnÃÂ©.
IMPORTANT: Pour que ce script marche le node de preset a besoin de deux paramÃÂ¨tres: preset_name, et shelf_name.
Ces paramÃÂ¨tres peuvent ÃÂªtre ajoutÃÂ© via le Parameter Interface du node.
preset_name = string, doit ÃÂªtre le mÃÂªme que le nom du tool qui correspond, sur la shelf
shelf_name = string, doit ÃÂªtre le mÃÂªme que le nom de la shelf qui contient le tool ÃÂ  mettre ÃÂ  jour
Limites: Ne peux mettre ÃÂ  jour qu\'un seul node. Utilisez un node gÃÂ©nÃÂ©ral, qui contient d\'autres node au besoin.
'''
logger = logging.getLogger("PRESET UPDATE")


def get_selected_nodes():
    nodes = hou.selectedNodes()
    try:
        node = nodes[0]
        return nodes
    except IndexError:
        logger.error('Please select a node to update')

def get_preset_info(nodes):
    preset_info = {'preset_name' : None,
                    'shelf_name' : None
                    }
    for node in nodes:
        parms = node.parms()
        for parm in parms:
            if parm.name() == 'preset_name':
                preset_info['preset_name'] = parm.evalAsString()
            elif parm.name() == 'shelf_name':
                preset_info['shelf_name'] = parm.evalAsString()
    try:
        assert preset_info['shelf_name'] is not None
    except AssertionError:
        logger.error("Selected node not connected to a preset. Make sure it has a 'preset_name' parm")
            
        
    try:
        assert preset_info['shelf_name'] is not None
    except AssertionError:
        logger.error("Selected node not connected to a preset. Make sure it has a 'shelf_name' parm")
        
        
    return preset_info
            
def get_tool_to_update(preset_info, shelf):
    update_tool = None

    #get tool to update
    tools = shelf.tools()
    for tool in tools:
        if tool.name() == preset_info['preset_name']:
            update_tool = tool
    try:
        assert update_tool is not None
    except AssertionError:
        logger.error("Selected node's preset name doesn't match with any of the {} shelf tools".format(shelf_name))
        
    return update_tool
   
def get_shelf(shelf_name):
    shelf = None
    try:
        shelf = hou.shelves.shelves()[shelf_name]
        return shelf
    except KeyError:
        logger.error("'{}' is not a valid shelf name or shelf doesn't exist".format(shelf_name)) 
    return None
    
def back_up_shelf(shelf, shelf_path):
    logger.info('creating backup of shelf {} '.format(shelf.name()))
    shelf_file_name = os.path.basename(shelf_path)
    new_shelf_name = datetime.now().strftime('%d-%m-%y_%H-%M')+'_' + shelf_file_name
    shelf_dir = os.path.dirname(shelf_path)
    if not os.path.exists(shelf_dir+'/old'):
        os.makedirs(shelf_dir+'/old')
    backup_dir = shelf_dir + '/old/'
    backup = backup_dir + new_shelf_name
    shutil.copy(shelf_path, backup)

def update_tool(data):

    nodes = data['nodes']
    shelf_path = data['shelf_path']
    tool = data['tool']
    menu_op_type = data['menu_op_type']
    menu_locations = data['menu_locations']
    node_type = None

    if len(nodes) > 1:
        parent = nodes[0].parent()
        node_type = nodes[0].type().name()

        subnet = parent.collapseIntoSubnet(nodes)
        node = subnet

    else:
        node = nodes[0]
        node_type = node.type().name()

    pre_script = """
import sys
import toolutils

pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else:
    pane_node = pane.pwd()


pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if '{}' not in child_type:
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

hou_parent = pane.pwd()

if locals().get('hou_parent') is None:
    hou_parent = hou.node('/mat')""".format(node_type)
    node_asCode = node.asCode(brief=True, recurse=True)
    
    extract_nodes = "hou_node.extractAndDelete()"
    post_script = """
parms = []
parms.append(hou_node.parm('shelf_name'))
parms.append(hou_node.parm('preset_name'))
for parm in parms:
    if parm.isHidden() == True:
        parm.hide(False)
    else:
        parm.hide(True)
    """
    if len(nodes) > 1:
        script = pre_script + node_asCode + extract_nodes
    else:
        script = pre_script + node_asCode
    tool.setData(script=script, icon='R:/Houdini/Houdini_otls/master/Menhir/menhirfx_logo_inbox128.png')
    tool.setFilePath(shelf_path)
    tool.setToolMenuOpType(hou.paneTabType.NetworkEditor, menu_op_type)
    tool.setToolLocations(menu_locations)
    if len(nodes) > 1:
        subnet.extractAndDelete()
    logger.info('Tool updated')
    
def get_tool_info():
    data = {
        'nodes' : None,
        'tool' : None,
        'shelf' : None,
        'shelf_path' : None,
        'menu_op_type' : None,
        'menu_locations' : None
    }
    data['nodes'] = get_selected_nodes()
    preset_info = get_preset_info(data['nodes'])
    data['shelf'] = get_shelf(preset_info['shelf_name'])
    data['shelf_path'] = data['shelf'].filePath()
    data['tool'] = get_tool_to_update(preset_info, data['shelf'])
    data['menu_op_type'] = data['tool'].toolMenuOpType(hou.paneTabType.NetworkEditor)
    data['menu_locations'] = data['tool'].toolMenuLocations()
    return data
  
    
def run():
    data = get_tool_info()
    back_up_shelf(data['shelf'], data['shelf_path'])
    update_tool(data)
    
run()
]]></script>
  </tool>

  <tool name="tool_1" label="New Tool" icon="R:/Houdini/Houdini_otls/master/Menhir/menhirfx_logo_inbox128.png">
    <script scriptType="python"><![CDATA[# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj")

# Code for /obj/topnet1
hou_node = hou_parent.createNode("topnet", "topnet1", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(-0.228758, -0.677339))
hou_node.hide(False)
hou_node.setSelected(True)

hou_parm_template_group = hou.ParmTemplateGroup()
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("cookcontrolssection2", "Cook Controls", folder_type=hou.folderType.Simple, default_value=0, ends_tab_group=False)
hou_parm_template.setTags({"group_type": "simple"})
# Code for parameter template
hou_parm_template2 = hou.ButtonParmTemplate("generatestatic", "Generate Static Work Items")
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ButtonParmTemplate("cookbutton", "Cook Output Node")
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ButtonParmTemplate("dirtybutton", "Dirty All")
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ButtonParmTemplate("cancelbutton", "Cancel Cook")
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("taskgraphsection2", "Save/Load Task Graph", folder_type=hou.folderType.Simple, default_value=0, ends_tab_group=False)
hou_parm_template.setTags({"group_type": "simple"})
# Code for parameter template
hou_parm_template2 = hou.ButtonParmTemplate("savetaskgraph", "Save Task Graph")
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ButtonParmTemplate("loadtaskgraph", "Load Task Graph")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("taskgraphfile", "Task Graph File", 1, default_value=(["$HIP/$HIPNAME.taskgraph.$F.py"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.FileReference, file_type=hou.fileType.Any, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"filechooser_pattern": "*.py"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("taskgraphautosave", "Auto-Save", default_value=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("taskgraphsaverate", "Auto-Save Rate", 1, default_value=([10]), min=1, max=100, min_is_strict=True, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ taskgraphautosave == 0 }")
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("schedulersection2", "Work Items and Scheduling", folder_type=hou.folderType.Simple, default_value=0, ends_tab_group=False)
hou_parm_template.setTags({"group_type": "simple"})
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("topscheduler", "Default Scheduler", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setTags({"opfilter": "!!TOP!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("usedefaultlabel", "Use Default Label", default_value=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("defaultlabel", "Default Item Label", 1, default_value=(["$OS.`@pdg_index`"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ usedefaultlabel == 0 }")
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.SeparatorParmTemplate("sep1")
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.MenuParmTemplate("regenerationtype", "On Node Recook", menu_items=(["0","1","2"]), menu_labels=(["Update Work Items and Invalidate Caches","Update Work Items Only","Ignore Changes"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.MenuParmTemplate("evaluationtime", "Evaluation Time", menu_items=(["0","1","2"]), menu_labels=(["Network Cook Time","Global Start Time","Custom"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.IntParmTemplate("customtime", "Custom Time", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ evaluationtime != 2 }")
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.StringParmTemplate("shelf_name", "shelf_name", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python)
hou_parm_template.setTags({"script_callback_language": "python"})
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.StringParmTemplate("preset_name", "preset_name", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python)
hou_parm_template.setTags({"script_callback_language": "python"})
hou_parm_template_group.append(hou_parm_template)
hou_node.setParmTemplateGroup(hou_parm_template_group)
# Code for /obj/topnet1/cookcontrolssection parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("cookcontrolssection")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/generatestatic parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("generatestatic")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/cookbutton parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("cookbutton")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/dirtybutton parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("dirtybutton")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/cancelbutton parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("cancelbutton")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/taskgraphsection parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("taskgraphsection")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/savetaskgraph parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("savetaskgraph")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/loadtaskgraph parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("loadtaskgraph")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/taskgraphfile parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("taskgraphfile")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("$HIP/$HIPNAME.taskgraph.$F.py")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/taskgraphautosave parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("taskgraphautosave")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/taskgraphsaverate parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("taskgraphsaverate")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(10)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/schedulersection parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("schedulersection")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/topscheduler parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("topscheduler")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("localscheduler")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/usedefaultlabel parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("usedefaultlabel")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/defaultlabel parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("defaultlabel")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("$OS.`@pdg_index`")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/regenerationtype parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("regenerationtype")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/evaluationtime parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("evaluationtime")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/customtime parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("customtime")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/cookcontrolssection2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("cookcontrolssection2")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/taskgraphsection2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("taskgraphsection2")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/schedulersection2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("schedulersection2")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/shelf_name parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("shelf_name")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("MFX_dev")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/preset_name parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1")
hou_parm = hou_node.parm("preset_name")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("tool_1")
hou_parm.setAutoscope(False)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("19.0.531")
# Update the parent node.
hou_parent = hou_node

# Code for /obj/topnet1/localscheduler
hou_node = hou_parent.createNode("localscheduler", "localscheduler", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(0, 0))
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/topnet1/localscheduler/folder01 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("folder01")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/folder5 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("folder5")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/maxprocsmenu parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("maxprocsmenu")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/maxprocs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("maxprocs")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/verbose parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("verbose")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/pdg_waitforfailures parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("pdg_waitforfailures")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/folder4 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("folder4")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/pdg_workingdir parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("pdg_workingdir")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("$HIP")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/pdg_workitemdatasource parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("pdg_workitemdatasource")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/pdg_compressworkitemdata parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("pdg_compressworkitemdata")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/pdg_validateoutputs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("pdg_validateoutputs")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/pdg_checkexpectedoutputs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("pdg_checkexpectedoutputs")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/pdg_mapmode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("pdg_mapmode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/pdg_usemapzone parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("pdg_usemapzone")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/pdg_mapzone parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("pdg_mapzone")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("$PDG_PATHMAP_ZONE")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/folder1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("folder1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/tempdirmenu parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("tempdirmenu")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("1")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/tempdirappendpid parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("tempdirappendpid")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/tempdircustom parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("tempdircustom")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("$HOUDINI_TEMP_DIR/$HIPNAME/pdgtemp")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/socketcallbacks parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("socketcallbacks")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/folder0_2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("folder0_2")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_single parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_single")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_is_CPU_number_set parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_is_CPU_number_set")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_CPUs_to_use parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_CPUs_to_use")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/folder6 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("folder6")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_useminfreemem parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_useminfreemem")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_minfreemem parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_minfreemem")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_minfreemempct parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_minfreemempct")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/folder2 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("folder2")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_echandleby parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_echandleby")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_echandleall parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_echandleall")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_eccustomcode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_eccustomcode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_maximumretries parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_maximumretries")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(3)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_addfailcountattr parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_addfailcountattr")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_failcountattr parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_failcountattr")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("failurecount")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_enabletimeout parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_enabletimeout")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_maxtime parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_maxtime")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_handletimeout parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_handletimeout")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/folder3 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("folder3")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_usehoudinimaxthreads parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_usehoudinimaxthreads")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_houdinimaxthreads parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_houdinimaxthreads")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_requireswindow parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_requireswindow")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_skippackages parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_skippackages")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_envunset parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_envunset")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/localscheduler/local_envmulti parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/localscheduler")
hou_parm = hou_node.parm("local_envmulti")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "1")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("1")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/topnet1/genericgenerator1
hou_node = hou_parent.createNode("genericgenerator", "genericgenerator1", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(-2.20463, 0.151391))
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/topnet1/genericgenerator1/processor_01 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("processor_01")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/pdg_workitemgeneration parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("pdg_workitemgeneration")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("2")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/pdg_cachemode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("pdg_cachemode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/sequential parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("sequential")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/copyinputs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("copyinputs")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/flattenindices parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("flattenindices")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/itemcount parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("itemcount")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/useindex parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("useindex")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/index parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("index")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/useframe parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("useframe")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/frame parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("frame")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/usepriority parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("usepriority")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/priority parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("priority")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/folder01 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("folder01")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/usedelay parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("usedelay")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("off")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/delay parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("delay")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/pdg_command parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("pdg_command")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/basecommand parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("basecommand")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/shellcommand parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("shellcommand")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/extraargs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("extraargs")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/expectedoutputsfrom parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("expectedoutputsfrom")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/expectedoutputattr parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("expectedoutputattr")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/useexpectedoutputtag parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("useexpectedoutputtag")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/expectedoutputtag parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("expectedoutputtag")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("file")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/expectedoutputfiles parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("expectedoutputfiles")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/topscheduler parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("topscheduler")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/addjobparms parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("addjobparms")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("In-Process")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/pdg_workitemlabel parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("pdg_workitemlabel")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/pdg_workitemlabelexpr parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("pdg_workitemlabelexpr")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/pdg_workitempriority parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("pdg_workitempriority")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/pdg_workitempriorityexpr parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("pdg_workitempriorityexpr")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/genericgenerator1/pdgnodedeps parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/genericgenerator1")
hou_parm = hou_node.parm("pdgnodedeps")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "1")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("1")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/topnet1/houdiniserver_end1
hou_node = hou_parent.createNode("commandserverend", "houdiniserver_end1", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(-2.20463, -2.78979))
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/topnet1/houdiniserver_end1/pdg_feedbackbegin parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_end1")
hou_parm = hou_node.parm("pdg_feedbackbegin")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("../houdiniserver_begin1")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_end1/pdg_partitionaftercook parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_end1")
hou_parm = hou_node.parm("pdg_partitionaftercook")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_end1/pdg_dirtymode parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_end1")
hou_parm = hou_node.parm("pdg_dirtymode")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_end1/pdg_partitiondepth parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_end1")
hou_parm = hou_node.parm("pdg_partitiondepth")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_end1/pdg_partitiontarget parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_end1")
hou_parm = hou_node.parm("pdg_partitiontarget")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_end1/pdg_alwaysevaluate parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_end1")
hou_parm = hou_node.parm("pdg_alwaysevaluate")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_end1/pdg_removestale parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_end1")
hou_parm = hou_node.parm("pdg_removestale")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_end1/pdg_partitionmergeattributes parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_end1")
hou_parm = hou_node.parm("pdg_partitionmergeattributes")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_end1/pdg_partitionmergeoperation1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_end1")
hou_parm = hou_node.parm("pdg_partitionmergeoperation1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("1")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_end1/pdg_partitionmergepattern1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_end1")
hou_parm = hou_node.parm("pdg_partitionmergepattern1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_end1/pdg_partitionmergepreserve1 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_end1")
hou_parm = hou_node.parm("pdg_partitionmergepreserve1")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


hou_node.setColor(hou.Color([0.98, 0.78, 0.26]))
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___toolid___", "geometry_grid")
hou_node.setUserData("___Version___", "")
hou_node.setUserData("___toolcount___", "1")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/topnet1/houdiniserver_begin1
hou_node = hou_parent.createNode("houdiniserver", "houdiniserver_begin1", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(-2.20463, -0.789785))
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/topnet1/houdiniserver_begin1/toptabs41 parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("toptabs41")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/pdg_workitemgeneration parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("pdg_workitemgeneration")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("2")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/iterationsfromupstream parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("iterationsfromupstream")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/iterations parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("iterations")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/copyinputs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("copyinputs")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("2")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/externalserver parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("externalserver")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/externalhost parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("externalhost")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/commandport parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("commandport")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/timeout parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("timeout")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(30)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/serverbinary parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("serverbinary")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("__PDG_HYTHON__")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/pdg_feedbackattribs parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("pdg_feedbackattribs")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/pdg_feedbackpattern parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("pdg_feedbackpattern")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/pdg_feedbackfiles parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("pdg_feedbackfiles")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/attributes parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("attributes")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/iterattribute parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("iterattribute")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("loopiter")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/sizeattribute parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("sizeattribute")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("loopsize")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/numattribute parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("numattribute")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("loopnum")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/pdgnodedeps parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("pdgnodedeps")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/topscheduler parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("topscheduler")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/addjobparms parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("addjobparms")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("In-Process")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/pdg_workitemlabel parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("pdg_workitemlabel")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/pdg_workitemlabelexpr parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("pdg_workitemlabelexpr")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/pdg_workitempriority parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("pdg_workitempriority")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set("0")
hou_parm.setAutoscope(False)


# Code for /obj/topnet1/houdiniserver_begin1/pdg_workitempriorityexpr parm 
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/topnet1/houdiniserver_begin1")
hou_parm = hou_node.parm("pdg_workitempriorityexpr")
hou_parm.lock(False)
hou_parm.deleteAllKeyframes()
hou_parm.set(0)
hou_parm.setAutoscope(False)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code to establish connections for /obj/topnet1/houdiniserver_end1
hou_node = hou_parent.node("houdiniserver_end1")
if hou_parent.node("houdiniserver_begin1") is not None:
    hou_node.setInput(0, hou_parent.node("houdiniserver_begin1"), 0)
# Code to establish connections for /obj/topnet1/houdiniserver_begin1
hou_node = hou_parent.node("houdiniserver_begin1")
if hou_parent.node("genericgenerator1") is not None:
    hou_node.setInput(0, hou_parent.node("genericgenerator1"), 0)

# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

]]></script>
  </tool>

  <tool name="hide_unhide_parms" label="Hide/Unhide Parms" icon="R:/Houdini/Houdini_otls/master/Menhir/menhirfx_logo_inbox128.png">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()

for node in nodes:
    parms = []
    parms.append(node.parm('shelf_name'))
    parms.append(node.parm('preset_name'))
    for parm in parms:
        if parm.isHidden() == True:
            parm.hide(False)
        else:
            parm.hide(True)]]></script>
  </tool>

  <tool name="add_parms" label="Add Parms" icon="R:/Houdini/Houdini_otls/master/Menhir/menhirfx_logo_inbox128.png">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()

for node in nodes:
    node.addSpareParmTuple(hou.StringParmTemplate('preset_name', 'Preset Name', 1))
    node.addSpareParmTuple(hou.StringParmTemplate('shelf_name', 'Shelf Name', 1))]]></script>
  </tool>

  <toolshelf name="shelf_3" label="New Shelf">
    <memberTool name="add_parms"/>
    <memberTool name="update_preset"/>
    <memberTool name="test0"/>
  </toolshelf>
</shelfDocument>
